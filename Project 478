{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 77,
      "metadata": {
        "id": "XSAxNWFMvrMF"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "data = pd.read_csv(\"https://github.com/dobariadhruv/Black-Friday-Sales-Prediction/files/9996111/BlackFridaySales.csv\")"
      ],
      "metadata": {
        "id": "G44IkIC3_yRZ"
      },
      "execution_count": 78,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data.shape"
      ],
      "metadata": {
        "id": "aGtzqGXX_iCW",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "01135325-30bd-46ee-95a5-6942be086fbc"
      },
      "execution_count": 79,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(550068, 12)"
            ]
          },
          "metadata": {},
          "execution_count": 79
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "1cJfcYbtvtWX",
        "outputId": "af69c5c0-b8bb-4756-aab7-bf4b0fe78ec6"
      },
      "execution_count": 80,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   User_ID Product_ID Gender   Age  Occupation City_Category  \\\n",
              "0  1000001  P00069042      F  0-17          10             A   \n",
              "1  1000001  P00248942      F  0-17          10             A   \n",
              "2  1000001  P00087842      F  0-17          10             A   \n",
              "3  1000001  P00085442      F  0-17          10             A   \n",
              "4  1000002  P00285442      M   55+          16             C   \n",
              "\n",
              "  Stay_In_Current_City_Years  Marital_Status  Product_Category_1  \\\n",
              "0                          2               0                   3   \n",
              "1                          2               0                   1   \n",
              "2                          2               0                  12   \n",
              "3                          2               0                  12   \n",
              "4                         4+               0                   8   \n",
              "\n",
              "   Product_Category_2  Product_Category_3  Purchase  \n",
              "0                 NaN                 NaN      8370  \n",
              "1                 6.0                14.0     15200  \n",
              "2                 NaN                 NaN      1422  \n",
              "3                14.0                 NaN      1057  \n",
              "4                 NaN                 NaN      7969  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-379617c9-a966-492f-81ca-ba5de097b86c\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>User_ID</th>\n",
              "      <th>Product_ID</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Age</th>\n",
              "      <th>Occupation</th>\n",
              "      <th>City_Category</th>\n",
              "      <th>Stay_In_Current_City_Years</th>\n",
              "      <th>Marital_Status</th>\n",
              "      <th>Product_Category_1</th>\n",
              "      <th>Product_Category_2</th>\n",
              "      <th>Product_Category_3</th>\n",
              "      <th>Purchase</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1000001</td>\n",
              "      <td>P00069042</td>\n",
              "      <td>F</td>\n",
              "      <td>0-17</td>\n",
              "      <td>10</td>\n",
              "      <td>A</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>8370</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1000001</td>\n",
              "      <td>P00248942</td>\n",
              "      <td>F</td>\n",
              "      <td>0-17</td>\n",
              "      <td>10</td>\n",
              "      <td>A</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>6.0</td>\n",
              "      <td>14.0</td>\n",
              "      <td>15200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1000001</td>\n",
              "      <td>P00087842</td>\n",
              "      <td>F</td>\n",
              "      <td>0-17</td>\n",
              "      <td>10</td>\n",
              "      <td>A</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>12</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1422</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1000001</td>\n",
              "      <td>P00085442</td>\n",
              "      <td>F</td>\n",
              "      <td>0-17</td>\n",
              "      <td>10</td>\n",
              "      <td>A</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>12</td>\n",
              "      <td>14.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1057</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1000002</td>\n",
              "      <td>P00285442</td>\n",
              "      <td>M</td>\n",
              "      <td>55+</td>\n",
              "      <td>16</td>\n",
              "      <td>C</td>\n",
              "      <td>4+</td>\n",
              "      <td>0</td>\n",
              "      <td>8</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>7969</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-379617c9-a966-492f-81ca-ba5de097b86c')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-379617c9-a966-492f-81ca-ba5de097b86c button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-379617c9-a966-492f-81ca-ba5de097b86c');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 80
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.describe()"
      ],
      "metadata": {
        "id": "yQaTxJ3DxM2-",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "outputId": "8819f871-67c7-479b-c030-4e1d0b779396"
      },
      "execution_count": 81,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            User_ID     Occupation  Marital_Status  Product_Category_1  \\\n",
              "count  5.500680e+05  550068.000000   550068.000000       550068.000000   \n",
              "mean   1.003029e+06       8.076707        0.409653            5.404270   \n",
              "std    1.727592e+03       6.522660        0.491770            3.936211   \n",
              "min    1.000001e+06       0.000000        0.000000            1.000000   \n",
              "25%    1.001516e+06       2.000000        0.000000            1.000000   \n",
              "50%    1.003077e+06       7.000000        0.000000            5.000000   \n",
              "75%    1.004478e+06      14.000000        1.000000            8.000000   \n",
              "max    1.006040e+06      20.000000        1.000000           20.000000   \n",
              "\n",
              "       Product_Category_2  Product_Category_3       Purchase  \n",
              "count       376430.000000       166821.000000  550068.000000  \n",
              "mean             9.842329           12.668243    9263.968713  \n",
              "std              5.086590            4.125338    5023.065394  \n",
              "min              2.000000            3.000000      12.000000  \n",
              "25%              5.000000            9.000000    5823.000000  \n",
              "50%              9.000000           14.000000    8047.000000  \n",
              "75%             15.000000           16.000000   12054.000000  \n",
              "max             18.000000           18.000000   23961.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-61836605-eae5-48f1-8ed3-c47d9716d443\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>User_ID</th>\n",
              "      <th>Occupation</th>\n",
              "      <th>Marital_Status</th>\n",
              "      <th>Product_Category_1</th>\n",
              "      <th>Product_Category_2</th>\n",
              "      <th>Product_Category_3</th>\n",
              "      <th>Purchase</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>5.500680e+05</td>\n",
              "      <td>550068.000000</td>\n",
              "      <td>550068.000000</td>\n",
              "      <td>550068.000000</td>\n",
              "      <td>376430.000000</td>\n",
              "      <td>166821.000000</td>\n",
              "      <td>550068.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>1.003029e+06</td>\n",
              "      <td>8.076707</td>\n",
              "      <td>0.409653</td>\n",
              "      <td>5.404270</td>\n",
              "      <td>9.842329</td>\n",
              "      <td>12.668243</td>\n",
              "      <td>9263.968713</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>1.727592e+03</td>\n",
              "      <td>6.522660</td>\n",
              "      <td>0.491770</td>\n",
              "      <td>3.936211</td>\n",
              "      <td>5.086590</td>\n",
              "      <td>4.125338</td>\n",
              "      <td>5023.065394</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.000001e+06</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>12.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>1.001516e+06</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>9.000000</td>\n",
              "      <td>5823.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>1.003077e+06</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>9.000000</td>\n",
              "      <td>14.000000</td>\n",
              "      <td>8047.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>1.004478e+06</td>\n",
              "      <td>14.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>15.000000</td>\n",
              "      <td>16.000000</td>\n",
              "      <td>12054.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>1.006040e+06</td>\n",
              "      <td>20.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>20.000000</td>\n",
              "      <td>18.000000</td>\n",
              "      <td>18.000000</td>\n",
              "      <td>23961.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-61836605-eae5-48f1-8ed3-c47d9716d443')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-61836605-eae5-48f1-8ed3-c47d9716d443 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-61836605-eae5-48f1-8ed3-c47d9716d443');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 81
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7o3bZeotJRM3",
        "outputId": "71b321ac-cb77-46f4-f850-29e94f062ad0"
      },
      "execution_count": 82,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 550068 entries, 0 to 550067\n",
            "Data columns (total 12 columns):\n",
            " #   Column                      Non-Null Count   Dtype  \n",
            "---  ------                      --------------   -----  \n",
            " 0   User_ID                     550068 non-null  int64  \n",
            " 1   Product_ID                  550068 non-null  object \n",
            " 2   Gender                      550068 non-null  object \n",
            " 3   Age                         550068 non-null  object \n",
            " 4   Occupation                  550068 non-null  int64  \n",
            " 5   City_Category               550068 non-null  object \n",
            " 6   Stay_In_Current_City_Years  550068 non-null  object \n",
            " 7   Marital_Status              550068 non-null  int64  \n",
            " 8   Product_Category_1          550068 non-null  int64  \n",
            " 9   Product_Category_2          376430 non-null  float64\n",
            " 10  Product_Category_3          166821 non-null  float64\n",
            " 11  Purchase                    550068 non-null  int64  \n",
            "dtypes: float64(2), int64(5), object(5)\n",
            "memory usage: 50.4+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Checking Null Value**"
      ],
      "metadata": {
        "id": "fbP_xPsCJx17"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oeY5vKSqJTRm",
        "outputId": "9b9c4931-fe39-4067-c605-96a577a00ea7"
      },
      "execution_count": 83,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "User_ID                            0\n",
              "Product_ID                         0\n",
              "Gender                             0\n",
              "Age                                0\n",
              "Occupation                         0\n",
              "City_Category                      0\n",
              "Stay_In_Current_City_Years         0\n",
              "Marital_Status                     0\n",
              "Product_Category_1                 0\n",
              "Product_Category_2            173638\n",
              "Product_Category_3            383247\n",
              "Purchase                           0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 83
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Checking percentage of Null Value**"
      ],
      "metadata": {
        "id": "KwcR-W_3J24n"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data.isnull().sum()/data.shape[0]*100"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PKVCLJzCJW_4",
        "outputId": "197d28e2-720f-4467-e263-aef32d55a6c0"
      },
      "execution_count": 84,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "User_ID                        0.000000\n",
              "Product_ID                     0.000000\n",
              "Gender                         0.000000\n",
              "Age                            0.000000\n",
              "Occupation                     0.000000\n",
              "City_Category                  0.000000\n",
              "Stay_In_Current_City_Years     0.000000\n",
              "Marital_Status                 0.000000\n",
              "Product_Category_1             0.000000\n",
              "Product_Category_2            31.566643\n",
              "Product_Category_3            69.672659\n",
              "Purchase                       0.000000\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 84
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "There are 31% null values in the Product_Category_2 and 69% null values in the Product_Category_3"
      ],
      "metadata": {
        "id": "NR_dUk0OUr19"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Checking Unique Value in dataset**"
      ],
      "metadata": {
        "id": "xRVtgU7MKDd9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data.nunique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fM9ZAMU4JkWa",
        "outputId": "f5d805bf-def0-4b2d-c020-fc6b3bcb559f"
      },
      "execution_count": 85,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "User_ID                        5891\n",
              "Product_ID                     3631\n",
              "Gender                            2\n",
              "Age                               7\n",
              "Occupation                       21\n",
              "City_Category                     3\n",
              "Stay_In_Current_City_Years        5\n",
              "Marital_Status                    2\n",
              "Product_Category_1               20\n",
              "Product_Category_2               17\n",
              "Product_Category_3               15\n",
              "Purchase                      18105\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 85
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "**Exploratory Data Analysis**"
      ],
      "metadata": {
        "id": "1yNhonq4KCdB"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Target Variable- Purchase"
      ],
      "metadata": {
        "id": "DmCrZ6SPLS1Z"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "boxplot =data.boxplot(column=[\"Purchase\",], return_type='axes')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 268
        },
        "id": "54ah3XMfKZiV",
        "outputId": "fd6e04aa-f80d-4d18-8478-679c79e4de73"
      },
      "execution_count": 86,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Purchase value have some outliers and is positive skewed\n",
        "\n"
      ],
      "metadata": {
        "id": "x5-Ki5BcLc_L"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data[\"Purchase\"].skew()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JjnQd4k0LWyW",
        "outputId": "06d4bf63-23e4-4111-a2d4-97c46aeaeb30"
      },
      "execution_count": 87,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.6001400037087128"
            ]
          },
          "metadata": {},
          "execution_count": 87
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data[\"Purchase\"].kurtosis()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Eozcjqa3LiCi",
        "outputId": "e118798f-0fb0-49cb-ec8f-61983447e842"
      },
      "execution_count": 88,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "-0.3383775655851702"
            ]
          },
          "metadata": {},
          "execution_count": 88
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.distplot(data[\"Purchase\"],color='b')\n",
        "plt.title(\"Purchase Distribution\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 351
        },
        "id": "OWlk_esjLjrL",
        "outputId": "d0e08175-18fc-43cf-bff3-ac7095e9f82a"
      },
      "execution_count": 89,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "  warnings.warn(msg, FutureWarning)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Age**"
      ],
      "metadata": {
        "id": "HcAJtnQkMKgB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sns.countplot(data['Age'])\n",
        "plt.title('Distribution of Age')\n",
        "plt.xlabel('Different Categories of Age')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 351
        },
        "id": "pWXioRBhMGbM",
        "outputId": "0f0444fd-d453-4644-ed6f-72e32c21aa34"
      },
      "execution_count": 90,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  FutureWarning\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Age group 26-35 makes the most number of purchases."
      ],
      "metadata": {
        "id": "kDbUXpcYMUB6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data.groupby(\"Age\").mean()[\"Purchase\"].plot(kind='bar')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 320
        },
        "id": "-BHEJ72YMNln",
        "outputId": "9c4c3a9a-e26a-48dd-e35b-962dac4e1235"
      },
      "execution_count": 91,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f553c8a2290>"
            ]
          },
          "metadata": {},
          "execution_count": 91
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.groupby(\"Age\").sum()['Purchase'].plot(kind=\"bar\")\n",
        "plt.title(\"Age and Purchase Analysis\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 314
        },
        "id": "OSy-UIhOMpPx",
        "outputId": "320a9a2c-7b37-4da3-8e9d-50737f3b57ac"
      },
      "execution_count": 92,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Total amount spent in purchase with respect to age attribute"
      ],
      "metadata": {
        "id": "hxtRDi_oMxX5"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Gender**"
      ],
      "metadata": {
        "id": "DRASF-RIM_xW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sns.countplot(data['Gender'])\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 335
        },
        "id": "k4M140y_Mp-r",
        "outputId": "745a0bcb-cf34-4cc7-85ca-eaf02bc3f641"
      },
      "execution_count": 93,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  FutureWarning\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data['Gender'].value_counts(normalize=True)*100"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eV80D2N3NFqL",
        "outputId": "242a6d29-9c00-4eca-8527-cc7e9ff6a9ee"
      },
      "execution_count": 94,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "M    75.310507\n",
              "F    24.689493\n",
              "Name: Gender, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 94
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.groupby(\"Gender\").mean()[\"Purchase\"]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OKynuPLFNLOh",
        "outputId": "0db20a5d-2e53-4bc9-de4d-86ef7a643ed6"
      },
      "execution_count": 95,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Gender\n",
              "F    8734.565765\n",
              "M    9437.526040\n",
              "Name: Purchase, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 95
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "On average, males spend more money on purchases than females."
      ],
      "metadata": {
        "id": "neVrCcExNN8l"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Martial Status**"
      ],
      "metadata": {
        "id": "t_0yz6XjOOP3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sns.countplot(data['Marital_Status'])\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 336
        },
        "id": "EC7fpWQ2NNBS",
        "outputId": "060826c6-fd3b-45c7-a767-c06b1bf237d8"
      },
      "execution_count": 96,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  FutureWarning\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.groupby(\"Marital_Status\").mean()[\"Purchase\"].plot(kind='bar')\n",
        "plt.title(\"Marital_Status and Purchase Analysis\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 293
        },
        "id": "KVedirxROWlM",
        "outputId": "e204db7c-b077-4d4b-9c1a-316857765ba7"
      },
      "execution_count": 97,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Although unmarried people spend more money on purchases, the average purchase amount for married and unmarried people is the same."
      ],
      "metadata": {
        "id": "rHd8HTYVOru4"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**City_Category**"
      ],
      "metadata": {
        "id": "7jSR2WYpP_uY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sns.countplot(data['City_Category'])\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 336
        },
        "id": "0yYVT34sObik",
        "outputId": "4b859f56-9e90-4088-8fc5-60981f27d1f6"
      },
      "execution_count": 98,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  FutureWarning\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAZcAAAEHCAYAAABiAAtOAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAATG0lEQVR4nO3df7DldX3f8ecLEINVwhK2SFiadcymmS1GlBW3ah0iGVyYaZZYUGiTXQ1xMxEdmVZbbKchgzJJxyRGNCFD4gprqogayjaDbjfEJMYG5aL8NoaNP8pSfmxYBBMbLfTdP87nyuFy7t27y+ecw737fMycOd/z/n6+3+/73vPHa74/zvebqkKSpJ4OmXYDkqTlx3CRJHVnuEiSujNcJEndGS6SpO4Om3YDzxTHHHNMrV69etptSNKScvPNN/9tVa2cWzdcmtWrVzMzMzPtNiRpSUnyzVF1D4tJkrozXCRJ3RkukqTuDBdJUneGiySpO8NFktSd4SJJ6s5wkSR1Z7hIkrrzF/qSloxXfuCV027hoPD5t33+aa/DPRdJUneGiySpO8NFktSd4SJJ6s5wkSR1Z7hIkrozXCRJ3RkukqTuDBdJUneGiySpO8NFktSd4SJJ6s5wkSR1Z7hIkrozXCRJ3RkukqTuDBdJUneGiySpO8NFktSd4SJJ6s5wkSR1Z7hIkrozXCRJ3Y0tXJKckOSzSe5KcmeSt7f60Ul2Jrm7va9o9SS5LMmuJLcleenQuja38Xcn2TxUPznJ7W2Zy5JkoW1IkiZjnHsujwH/rqrWAuuBC5KsBS4CbqiqNcAN7TPAGcCa9toCXA6DoAAuBl4OnAJcPBQWlwNvHlpuQ6vPtw1J0gSMLVyq6r6q+lKb/jbwFeB4YCNwVRt2FXBWm94IbKuBG4GjkhwHvBbYWVV7q+phYCewoc07sqpurKoCts1Z16htSJImYCLnXJKsBl4CfAE4tqrua7PuB45t08cD9wwttrvVFqrvHlFngW1IkiZg7OGS5LnAp4ALq+rR4Xltj6PGuf2FtpFkS5KZJDN79uwZZxuSdFAZa7gkeRaDYPmvVfWHrfxAO6RFe3+w1e8FThhafFWrLVRfNaK+0DaepKquqKp1VbVu5cqVB/ZHSpKeYpxXiwX4EPCVqvrNoVnbgdkrvjYD1w3VN7WrxtYDj7RDWzuA05OsaCfyTwd2tHmPJlnftrVpzrpGbUOSNAGHjXHdrwR+Drg9yS2t9h+BXwOuSXI+8E3g9W3e9cCZwC7gO8CbAKpqb5J3Aze1cZdU1d42/RbgSuAI4NPtxQLbkCRNwNjCpar+Asg8s08bMb6AC+ZZ11Zg64j6DHDiiPpDo7YhSZoMf6EvSerOcJEkdWe4SJK6M1wkSd0ZLpKk7gwXSVJ3hoskqTvDRZLUneEiSerOcJEkdWe4SJK6M1wkSd0ZLpKk7gwXSVJ3hoskqTvDRZLUneEiSerOcJEkdWe4SJK6M1wkSd0ZLpKk7g6bdgPSpP2vS1407RaWvX/yy7dPuwVNmXsukqTuDBdJUneGiySpO8NFktSd4SJJ6s5wkSR1Z7hIkrozXCRJ3RkukqTuDBdJUneGiySpO8NFktSd4SJJ6s5wkSR1N7ZwSbI1yYNJ7hiq/UqSe5Pc0l5nDs17V5JdSb6a5LVD9Q2ttivJRUP1FyT5Qqt/PMnhrf7s9nlXm796XH+jJGm0ce65XAlsGFF/X1Wd1F7XAyRZC5wL/LO2zO8kOTTJocBvA2cAa4Hz2liA/9LW9aPAw8D5rX4+8HCrv6+NkyRN0NjCpar+HNi7yOEbgaur6rtV9XVgF3BKe+2qqq9V1feAq4GNSQK8BvhkW/4q4KyhdV3Vpj8JnNbGS5ImZBrnXN6a5LZ22GxFqx0P3DM0ZnerzVf/IeBbVfXYnPqT1tXmP9LGS5ImZNLhcjnwQuAk4D7gNya8/SdJsiXJTJKZPXv2TLMVSVpWJhouVfVAVT1eVf8P+D0Gh70A7gVOGBq6qtXmqz8EHJXksDn1J62rzf/BNn5UP1dU1bqqWrdy5cqn++dJkprD9j2knyTHVdV97ePPALNXkm0HPprkN4EfBtYAXwQCrEnyAgahcS7wr6uqknwWOJvBeZjNwHVD69oM/GWb/ydVVT3/jpPfua3n6jTCze/dNO0WJD0NYwuXJB8DTgWOSbIbuBg4NclJQAHfAH4RoKruTHINcBfwGHBBVT3e1vNWYAdwKLC1qu5sm/gPwNVJ3gN8GfhQq38I+EiSXQwuKDh3XH+jJGm0sYVLVZ03ovyhEbXZ8ZcCl46oXw9cP6L+NZ44rDZc/wfgnP1qVpLUlb/QlyR1Z7hIkrozXCRJ3RkukqTuDBdJUneGiySpO8NFktSd4SJJ6s5wkSR1t6hwSXLDYmqSJME+bv+S5AeA5zC4P9gKBjeSBDiSJ56fIknSk+zr3mK/CFzI4E7FN/NEuDwKfHCMfUmSlrAFw6Wq3g+8P8nbquoDE+pJkrTELequyFX1gSSvAFYPL1NVPthEkvQUiwqXJB9h8HjiW4DHW7kAw0WS9BSLfZ7LOmBt7yc6SpKWp8X+zuUO4PnjbESStHwsds/lGOCuJF8EvjtbrKqfHktXkqQlbbHh8ivjbEKStLws9mqxPxt3I5Kk5WOxV4t9m8HVYQCHA88C/r6qjhxXY5KkpWuxey7Pm51OEmAjsH5cTUmSlrb9vityDfw34LVj6EeStAws9rDY64Y+HsLgdy//MJaOJElL3mKvFvuXQ9OPAd9gcGhMkqSnWOw5lzeNuxFJ0vKx2IeFrUpybZIH2+tTSVaNuzlJ0tK02BP6Hwa2M3iuyw8D/73VJEl6isWGy8qq+nBVPdZeVwIrx9iXJGkJW2y4PJTkZ5Mc2l4/Czw0zsYkSUvXYsPl54HXA/cD9wFnA28cU0+SpCVusZciXwJsrqqHAZIcDfw6g9CRJOlJFrvn8hOzwQJQVXuBl4ynJUnSUrfYcDkkyYrZD23PZbF7PZKkg8xiA+I3gL9M8on2+Rzg0vG0JEla6hb7C/1tSWaA17TS66rqrvG1JUlayhZ9V+SququqPthe+wyWJFvbr/nvGKodnWRnkrvb+4pWT5LLkuxKcluSlw4ts7mNvzvJ5qH6yUlub8tc1h4FMO82JEmTs9+33N8PVwIb5tQuAm6oqjXADe0zwBnAmvbaAlwO3z+3czHwcuAU4OKhsLgcePPQchv2sQ1J0oSMLVyq6s+BvXPKG4Gr2vRVwFlD9W3tWTE3AkclOY7BM2N2VtXedrXaTmBDm3dkVd1YVQVsm7OuUduQJE3IOPdcRjm2qu5r0/cDx7bp44F7hsbtbrWF6rtH1BfaxlMk2ZJkJsnMnj17DuDPkSSNMulw+b62x1HT3EZVXVFV66pq3cqV3ipNknqZdLg80A5p0d4fbPV7gROGxq1qtYXqq0bUF9qGJGlCJh0u24HZK742A9cN1Te1q8bWA4+0Q1s7gNOTrGgn8k8HdrR5jyZZ364S2zRnXaO2IUmakLH9yj7Jx4BTgWOS7GZw1devAdckOR/4JoObYQJcD5wJ7AK+A7wJBreZSfJu4KY27pJ26xmAtzC4Iu0I4NPtxQLbkCRNyNjCparOm2fWaSPGFnDBPOvZCmwdUZ8BThxRf2jUNiRJkzO1E/qSpOXLcJEkdWe4SJK6M1wkSd0ZLpKk7gwXSVJ3hoskqTvDRZLUneEiSerOcJEkdWe4SJK6M1wkSd0ZLpKk7gwXSVJ3hoskqTvDRZLUneEiSerOcJEkdWe4SJK6M1wkSd0ZLpKk7gwXSVJ3hoskqTvDRZLUneEiSerOcJEkdWe4SJK6M1wkSd0ZLpKk7gwXSVJ3hoskqTvDRZLUneEiSerOcJEkdWe4SJK6M1wkSd1NJVySfCPJ7UluSTLTakcn2Znk7va+otWT5LIku5LcluSlQ+vZ3MbfnWTzUP3ktv5dbdlM/q+UpIPXNPdcfrKqTqqqde3zRcANVbUGuKF9BjgDWNNeW4DLYRBGwMXAy4FTgItnA6mNefPQchvG/+dIkmY9kw6LbQSuatNXAWcN1bfVwI3AUUmOA14L7KyqvVX1MLAT2NDmHVlVN1ZVAduG1iVJmoBphUsB/yPJzUm2tNqxVXVfm74fOLZNHw/cM7Ts7lZbqL57RP0pkmxJMpNkZs+ePU/n75EkDTlsStt9VVXdm+QfAzuT/NXwzKqqJDXuJqrqCuAKgHXr1o19e5J0sJjKnktV3dveHwSuZXDO5IF2SIv2/mAbfi9wwtDiq1ptofqqEXVJ0oRMPFyS/KMkz5udBk4H7gC2A7NXfG0GrmvT24FN7aqx9cAj7fDZDuD0JCvaifzTgR1t3qNJ1rerxDYNrUuSNAHTOCx2LHBtuzr4MOCjVfWZJDcB1yQ5H/gm8Po2/nrgTGAX8B3gTQBVtTfJu4Gb2rhLqmpvm34LcCVwBPDp9pIkTcjEw6Wqvga8eET9IeC0EfUCLphnXVuBrSPqM8CJT7tZSdIBeSZdiixJWiYMF0lSd4aLJKk7w0WS1J3hIknqznCRJHVnuEiSujNcJEndGS6SpO4MF0lSd4aLJKk7w0WS1J3hIknqznCRJHVnuEiSujNcJEndGS6SpO4MF0lSd4aLJKk7w0WS1J3hIknqznCRJHVnuEiSujNcJEndGS6SpO4MF0lSd4aLJKk7w0WS1J3hIknqznCRJHVnuEiSujNcJEndGS6SpO4MF0lSd4aLJKk7w0WS1N2yDZckG5J8NcmuJBdNux9JOpgsy3BJcijw28AZwFrgvCRrp9uVJB08lmW4AKcAu6rqa1X1PeBqYOOUe5Kkg0aqato9dJfkbGBDVf1C+/xzwMur6q1zxm0BtrSP/xT46kQbnaxjgL+ddhM6IH53S9ty//5+pKpWzi0eNo1Onimq6grgimn3MQlJZqpq3bT70P7zu1vaDtbvb7keFrsXOGHo86pWkyRNwHINl5uANUlekORw4Fxg+5R7kqSDxrI8LFZVjyV5K7ADOBTYWlV3TrmtaTsoDv8tU353S9tB+f0tyxP6kqTpWq6HxSRJU2S4SJK6M1yWuSRnJakkPz7tXrR/kjw/ydVJ/ibJzUmuT/Jj0+5Li5Pk8SS3JLk1yZeSvGLaPU2S4bL8nQf8RXvXEpEkwLXAn1bVC6vqZOBdwLHT7Uz74f9U1UlV9WIG392vTruhSTJclrEkzwVeBZzP4HJsLR0/Cfzfqvrd2UJV3VpVn5tiTzpwRwIPT7uJSVqWlyLr+zYCn6mqv07yUJKTq+rmaTelRTkR8Lta2o5IcgvwA8BxwGum3M9EueeyvJ3H4KadtHcPjUmTM3tY7MeBDcC2drjzoODvXJapJEcDu4E9QDH4MWkxuMmcX/ozXJLTgIur6tXT7kUHJsnfVdVzhz4/ALyoqh6cYlsT457L8nU28JGq+pGqWl1VJwBfB/7FlPvS4vwJ8Ox2524AkvxEEr+/JahdrXko8NC0e5kUw2X5Oo/B1UbDPoWHxpaEtnf5M8BPtUuR72RwtdH90+1M++GIdinyLcDHgc1V9fi0m5oUD4tJkrpzz0WS1J3hIknqznCRJHVnuEiSujNcJEndGS6SpO4MF2kB89z2/tVJPtnmn5TkzKex/k1J7khye5IvJ3nHPsaflWTtgW5PmhTDRZrHAre9r6o6uw07CTigcElyBnAhcHpVvQhYDzyyj8XOAsYaLkm8oa2eNsNFmt/I294D97S9jcOBS4A3tF9ivyHJ3UlWAiQ5JMmu2c8jvAt4R1X977bu71bV77Vl35zkpvagqU8leU572NRPA+9t23the32m7VV9bvahcK1+Y9sjek+Sv2v1JHnv0N7SG1r91Lb8duCuJJckuXC20SSXJnl71/+uljXDRZrfgre9r6rvAb8MfLzd/fbjwB8A/6YN+Sng1qracwDr/8Oqell70NRXgPOr6n8C24F3tu39DXAF8La2V/UO4Hfa8u8H3t/2iHYPrfd1DPa2Xtz6e2+S49q8lwJvr6ofA7YCm2AQkgyeB/QH8/0vpLnc/ZX62gpcB/wW8PPAhw9wPScmeQ9wFPBcYMfcAe1hcK8APjF0J/dnt/d/zuAQGsBHgV9v068CPtbucfVAkj8DXgY8Cnyxqr4OUFXfaM8AegmDp19+uaoOmpsu6ukzXKT53cng7tKLVlX3JHkgyWuAU3hiL2a+9Z/M4A7Ic10JnFVVtyZ5I3DqiDGHAN+qqpP2p8cF/P2cz78PvBF4PoPQlBbNw2LS/Ebe9h44YWjMt4HnzVnu9xkcQvrEPu6C+6sMDks9v6378CS/0OY9D7gvybN4ckB9f3tV9Sjw9STntOWT5MVt3I3Av2rTw4+4/hyDc0SHtnNBrwa+OE9/1zJ4yNXLGLHnJC3EcJHmscjb3n8WWDt7Qr/VtjM4lLXgIbGquh74IPDHbd1fYvCsdYD/DHwB+DzwV0OLXQ28s122/EIGwXN+klsZ7AltbOMuBP5tktuAH+WJq9CuBW4DbmUQnv++qkbexr+dU/oscM3BdKt49eEt96XOkqwD3ldVU3uwV5LnMHjMbiU5Fzivqjbua7k56ziEQeCdU1V3j6NPLV+ec5E6SnIR8EssfK5lEk4GPth+q/MtBhcXLFr7oeYfAdcaLDoQ7rlIY5bkPwHnzCl/oqounUY/0iQYLpKk7jyhL0nqznCRJHVnuEiSujNcJEnd/X9pB3l1v0eZlwAAAABJRU5ErkJggg==\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "It is observed that city category B has made the most number of puchases."
      ],
      "metadata": {
        "id": "HnhUp6nSQRoY"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Product_Category_1**"
      ],
      "metadata": {
        "id": "ADPGHS1VQ6KF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.hist(data[\"Product_Category_1\"]) \n",
        "plt.xlabel('Product_Category_1')\n",
        "plt.ylabel('Count')\n",
        "plt.title('Histogram of Product_Category_1')\n",
        "plt.grid(True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "id": "QS7m57NyQJWy",
        "outputId": "8360562d-67ed-4728-f285-dba87041e0a6"
      },
      "execution_count": 99,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Product_Category1 is right skewed"
      ],
      "metadata": {
        "id": "hDmoMCZ2RPqQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data.groupby('Product_Category_1').sum()['Purchase'].plot(kind='bar',figsize=(18,5))\n",
        "plt.title(\"Product_Category_1 and Purchase Analysis\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 353
        },
        "id": "iiDnK3hbQ4xx",
        "outputId": "9b366214-72a6-408b-cf0c-763f73d72549"
      },
      "execution_count": 100,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1296x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Product_category_2**"
      ],
      "metadata": {
        "id": "ByXwlMQLR-Xq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.hist(data[\"Product_Category_2\"]) \n",
        "plt.xlabel('Product_Category_2')\n",
        "plt.ylabel('Count')\n",
        "plt.title('Histogram of Product_Category_2')\n",
        "plt.grid(True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "id": "wsJwkvl-Rt5J",
        "outputId": "99412e28-0751-480f-d7ef-9199964c224e"
      },
      "execution_count": 101,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Product_category_3"
      ],
      "metadata": {
        "id": "ckC9AwBHSKHh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.hist(data[\"Product_Category_3\"]) \n",
        "plt.xlabel('Product_Category_3')\n",
        "plt.ylabel('Count')\n",
        "plt.title('Histogram of Product_Category_3')\n",
        "plt.grid(True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "id": "ap1YCjUBRW6q",
        "outputId": "a6086e56-751d-4d73-9afd-e9ab70b1d650"
      },
      "execution_count": 102,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Stay_In_Current_City_Years**"
      ],
      "metadata": {
        "id": "d7zPiyQjSkUX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sns.countplot(data['Stay_In_Current_City_Years'])\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 336
        },
        "id": "4q-mp9sNSLl2",
        "outputId": "13b492a2-c86a-4c19-d2f3-835ff7fad1c4"
      },
      "execution_count": 103,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  FutureWarning\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "It appears that the longer someone lives in that city, the less likely they are to purchase new items. As a result, if someone is new in town and needs a lot of new things for their house, they will take advantage of the low prices on Black Friday to get everything they need."
      ],
      "metadata": {
        "id": "oKONaOXGSrGP"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Correlation** **between** **varibles**"
      ],
      "metadata": {
        "id": "nNJpLv7iTNX8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data.corr()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 269
        },
        "id": "fftLTIh5S9XE",
        "outputId": "21227b5a-5602-418c-c12b-92d31005e82e"
      },
      "execution_count": 104,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                     User_ID  Occupation  Marital_Status  Product_Category_1  \\\n",
              "User_ID             1.000000   -0.023971        0.020443            0.003825   \n",
              "Occupation         -0.023971    1.000000        0.024280           -0.007618   \n",
              "Marital_Status      0.020443    0.024280        1.000000            0.019888   \n",
              "Product_Category_1  0.003825   -0.007618        0.019888            1.000000   \n",
              "Product_Category_2  0.001529   -0.000384        0.015138            0.540583   \n",
              "Product_Category_3  0.003419    0.013263        0.019473            0.229678   \n",
              "Purchase            0.004716    0.020833       -0.000463           -0.343703   \n",
              "\n",
              "                    Product_Category_2  Product_Category_3  Purchase  \n",
              "User_ID                       0.001529            0.003419  0.004716  \n",
              "Occupation                   -0.000384            0.013263  0.020833  \n",
              "Marital_Status                0.015138            0.019473 -0.000463  \n",
              "Product_Category_1            0.540583            0.229678 -0.343703  \n",
              "Product_Category_2            1.000000            0.543649 -0.209918  \n",
              "Product_Category_3            0.543649            1.000000 -0.022006  \n",
              "Purchase                     -0.209918           -0.022006  1.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c1cd5d1b-7bda-4b22-9753-da0880c55891\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>User_ID</th>\n",
              "      <th>Occupation</th>\n",
              "      <th>Marital_Status</th>\n",
              "      <th>Product_Category_1</th>\n",
              "      <th>Product_Category_2</th>\n",
              "      <th>Product_Category_3</th>\n",
              "      <th>Purchase</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>User_ID</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.023971</td>\n",
              "      <td>0.020443</td>\n",
              "      <td>0.003825</td>\n",
              "      <td>0.001529</td>\n",
              "      <td>0.003419</td>\n",
              "      <td>0.004716</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Occupation</th>\n",
              "      <td>-0.023971</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.024280</td>\n",
              "      <td>-0.007618</td>\n",
              "      <td>-0.000384</td>\n",
              "      <td>0.013263</td>\n",
              "      <td>0.020833</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Marital_Status</th>\n",
              "      <td>0.020443</td>\n",
              "      <td>0.024280</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.019888</td>\n",
              "      <td>0.015138</td>\n",
              "      <td>0.019473</td>\n",
              "      <td>-0.000463</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Product_Category_1</th>\n",
              "      <td>0.003825</td>\n",
              "      <td>-0.007618</td>\n",
              "      <td>0.019888</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.540583</td>\n",
              "      <td>0.229678</td>\n",
              "      <td>-0.343703</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Product_Category_2</th>\n",
              "      <td>0.001529</td>\n",
              "      <td>-0.000384</td>\n",
              "      <td>0.015138</td>\n",
              "      <td>0.540583</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.543649</td>\n",
              "      <td>-0.209918</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Product_Category_3</th>\n",
              "      <td>0.003419</td>\n",
              "      <td>0.013263</td>\n",
              "      <td>0.019473</td>\n",
              "      <td>0.229678</td>\n",
              "      <td>0.543649</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.022006</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Purchase</th>\n",
              "      <td>0.004716</td>\n",
              "      <td>0.020833</td>\n",
              "      <td>-0.000463</td>\n",
              "      <td>-0.343703</td>\n",
              "      <td>-0.209918</td>\n",
              "      <td>-0.022006</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c1cd5d1b-7bda-4b22-9753-da0880c55891')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-c1cd5d1b-7bda-4b22-9753-da0880c55891 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-c1cd5d1b-7bda-4b22-9753-da0880c55891');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 104
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.heatmap(data.corr(),annot=True)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 359
        },
        "id": "KHeH2_h6TVnv",
        "outputId": "5fabb71f-3fb4-45bc-d8f8-5a5aa31fe856"
      },
      "execution_count": 105,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "There is a some corellation between the product category groups."
      ],
      "metadata": {
        "id": "aufn1eGfTfAt"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Creating Dummy variable**"
      ],
      "metadata": {
        "id": "BKtNulKNVrOX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JqB9_qI3VxI3",
        "outputId": "2c276fab-9204-499c-d72d-7542eac078c6"
      },
      "execution_count": 106,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['User_ID', 'Product_ID', 'Gender', 'Age', 'Occupation', 'City_Category',\n",
              "       'Stay_In_Current_City_Years', 'Marital_Status', 'Product_Category_1',\n",
              "       'Product_Category_2', 'Product_Category_3', 'Purchase'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 106
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = data.copy()"
      ],
      "metadata": {
        "id": "f_JcUuUsWVRt"
      },
      "execution_count": 107,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.get_dummies(df, columns=['Stay_In_Current_City_Years'])"
      ],
      "metadata": {
        "id": "DR_55vmUW78r"
      },
      "execution_count": 108,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 583
        },
        "id": "prpEP6y5XDCR",
        "outputId": "e38748d6-dadd-4b89-ce3d-5d6a5eb0fb25"
      },
      "execution_count": 109,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   User_ID Product_ID Gender    Age  Occupation City_Category  Marital_Status  \\\n",
              "0  1000001  P00069042      F   0-17          10             A               0   \n",
              "1  1000001  P00248942      F   0-17          10             A               0   \n",
              "2  1000001  P00087842      F   0-17          10             A               0   \n",
              "3  1000001  P00085442      F   0-17          10             A               0   \n",
              "4  1000002  P00285442      M    55+          16             C               0   \n",
              "5  1000003  P00193542      M  26-35          15             A               0   \n",
              "6  1000004  P00184942      M  46-50           7             B               1   \n",
              "7  1000004  P00346142      M  46-50           7             B               1   \n",
              "8  1000004   P0097242      M  46-50           7             B               1   \n",
              "9  1000005  P00274942      M  26-35          20             A               1   \n",
              "\n",
              "   Product_Category_1  Product_Category_2  Product_Category_3  Purchase  \\\n",
              "0                   3                 NaN                 NaN      8370   \n",
              "1                   1                 6.0                14.0     15200   \n",
              "2                  12                 NaN                 NaN      1422   \n",
              "3                  12                14.0                 NaN      1057   \n",
              "4                   8                 NaN                 NaN      7969   \n",
              "5                   1                 2.0                 NaN     15227   \n",
              "6                   1                 8.0                17.0     19215   \n",
              "7                   1                15.0                 NaN     15854   \n",
              "8                   1                16.0                 NaN     15686   \n",
              "9                   8                 NaN                 NaN      7871   \n",
              "\n",
              "   Stay_In_Current_City_Years_0  Stay_In_Current_City_Years_1  \\\n",
              "0                             0                             0   \n",
              "1                             0                             0   \n",
              "2                             0                             0   \n",
              "3                             0                             0   \n",
              "4                             0                             0   \n",
              "5                             0                             0   \n",
              "6                             0                             0   \n",
              "7                             0                             0   \n",
              "8                             0                             0   \n",
              "9                             0                             1   \n",
              "\n",
              "   Stay_In_Current_City_Years_2  Stay_In_Current_City_Years_3  \\\n",
              "0                             1                             0   \n",
              "1                             1                             0   \n",
              "2                             1                             0   \n",
              "3                             1                             0   \n",
              "4                             0                             0   \n",
              "5                             0                             1   \n",
              "6                             1                             0   \n",
              "7                             1                             0   \n",
              "8                             1                             0   \n",
              "9                             0                             0   \n",
              "\n",
              "   Stay_In_Current_City_Years_4+  \n",
              "0                              0  \n",
              "1                              0  \n",
              "2                              0  \n",
              "3                              0  \n",
              "4                              1  \n",
              "5                              0  \n",
              "6                              0  \n",
              "7                              0  \n",
              "8                              0  \n",
              "9                              0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-654102c1-1902-4e67-818f-3313f060e28f\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>User_ID</th>\n",
              "      <th>Product_ID</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Age</th>\n",
              "      <th>Occupation</th>\n",
              "      <th>City_Category</th>\n",
              "      <th>Marital_Status</th>\n",
              "      <th>Product_Category_1</th>\n",
              "      <th>Product_Category_2</th>\n",
              "      <th>Product_Category_3</th>\n",
              "      <th>Purchase</th>\n",
              "      <th>Stay_In_Current_City_Years_0</th>\n",
              "      <th>Stay_In_Current_City_Years_1</th>\n",
              "      <th>Stay_In_Current_City_Years_2</th>\n",
              "      <th>Stay_In_Current_City_Years_3</th>\n",
              "      <th>Stay_In_Current_City_Years_4+</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1000001</td>\n",
              "      <td>P00069042</td>\n",
              "      <td>F</td>\n",
              "      <td>0-17</td>\n",
              "      <td>10</td>\n",
              "      <td>A</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>8370</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1000001</td>\n",
              "      <td>P00248942</td>\n",
              "      <td>F</td>\n",
              "      <td>0-17</td>\n",
              "      <td>10</td>\n",
              "      <td>A</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>6.0</td>\n",
              "      <td>14.0</td>\n",
              "      <td>15200</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1000001</td>\n",
              "      <td>P00087842</td>\n",
              "      <td>F</td>\n",
              "      <td>0-17</td>\n",
              "      <td>10</td>\n",
              "      <td>A</td>\n",
              "      <td>0</td>\n",
              "      <td>12</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1422</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1000001</td>\n",
              "      <td>P00085442</td>\n",
              "      <td>F</td>\n",
              "      <td>0-17</td>\n",
              "      <td>10</td>\n",
              "      <td>A</td>\n",
              "      <td>0</td>\n",
              "      <td>12</td>\n",
              "      <td>14.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1057</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1000002</td>\n",
              "      <td>P00285442</td>\n",
              "      <td>M</td>\n",
              "      <td>55+</td>\n",
              "      <td>16</td>\n",
              "      <td>C</td>\n",
              "      <td>0</td>\n",
              "      <td>8</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>7969</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>1000003</td>\n",
              "      <td>P00193542</td>\n",
              "      <td>M</td>\n",
              "      <td>26-35</td>\n",
              "      <td>15</td>\n",
              "      <td>A</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>15227</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>1000004</td>\n",
              "      <td>P00184942</td>\n",
              "      <td>M</td>\n",
              "      <td>46-50</td>\n",
              "      <td>7</td>\n",
              "      <td>B</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>8.0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>19215</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>1000004</td>\n",
              "      <td>P00346142</td>\n",
              "      <td>M</td>\n",
              "      <td>46-50</td>\n",
              "      <td>7</td>\n",
              "      <td>B</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>15.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>15854</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>1000004</td>\n",
              "      <td>P0097242</td>\n",
              "      <td>M</td>\n",
              "      <td>46-50</td>\n",
              "      <td>7</td>\n",
              "      <td>B</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>16.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>15686</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>1000005</td>\n",
              "      <td>P00274942</td>\n",
              "      <td>M</td>\n",
              "      <td>26-35</td>\n",
              "      <td>20</td>\n",
              "      <td>A</td>\n",
              "      <td>1</td>\n",
              "      <td>8</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>7871</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-654102c1-1902-4e67-818f-3313f060e28f')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-654102c1-1902-4e67-818f-3313f060e28f button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-654102c1-1902-4e67-818f-3313f060e28f');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 109
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Dropping the irrelevant** **columns**"
      ],
      "metadata": {
        "id": "DbJ91OYlWN1t"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df = df.drop([\"User_ID\",\"Product_ID\"],axis=1)"
      ],
      "metadata": {
        "id": "rrBQ5CPPVzRr"
      },
      "execution_count": 110,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Encoding Categorical variable**"
      ],
      "metadata": {
        "id": "_NMt1D7lXn_h"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import LabelEncoder\n",
        "lr = LabelEncoder()\n",
        "df['Gender'] = lr.fit_transform(df['Gender'])\n",
        "df['Age'] = lr.fit_transform(df['Age'])\n",
        "df['City_Category'] = lr.fit_transform(df['City_Category'])\n"
      ],
      "metadata": {
        "id": "KpnKxHpFWWfR"
      },
      "execution_count": 111,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head(5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 270
        },
        "id": "ljbBfzY5X7-V",
        "outputId": "1cb24c3d-9856-4c7c-b78e-495316a38535"
      },
      "execution_count": 112,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Gender  Age  Occupation  City_Category  Marital_Status  Product_Category_1  \\\n",
              "0       0    0          10              0               0                   3   \n",
              "1       0    0          10              0               0                   1   \n",
              "2       0    0          10              0               0                  12   \n",
              "3       0    0          10              0               0                  12   \n",
              "4       1    6          16              2               0                   8   \n",
              "\n",
              "   Product_Category_2  Product_Category_3  Purchase  \\\n",
              "0                 NaN                 NaN      8370   \n",
              "1                 6.0                14.0     15200   \n",
              "2                 NaN                 NaN      1422   \n",
              "3                14.0                 NaN      1057   \n",
              "4                 NaN                 NaN      7969   \n",
              "\n",
              "   Stay_In_Current_City_Years_0  Stay_In_Current_City_Years_1  \\\n",
              "0                             0                             0   \n",
              "1                             0                             0   \n",
              "2                             0                             0   \n",
              "3                             0                             0   \n",
              "4                             0                             0   \n",
              "\n",
              "   Stay_In_Current_City_Years_2  Stay_In_Current_City_Years_3  \\\n",
              "0                             1                             0   \n",
              "1                             1                             0   \n",
              "2                             1                             0   \n",
              "3                             1                             0   \n",
              "4                             0                             0   \n",
              "\n",
              "   Stay_In_Current_City_Years_4+  \n",
              "0                              0  \n",
              "1                              0  \n",
              "2                              0  \n",
              "3                              0  \n",
              "4                              1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-cf975078-f00b-425e-8769-14683af48402\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Gender</th>\n",
              "      <th>Age</th>\n",
              "      <th>Occupation</th>\n",
              "      <th>City_Category</th>\n",
              "      <th>Marital_Status</th>\n",
              "      <th>Product_Category_1</th>\n",
              "      <th>Product_Category_2</th>\n",
              "      <th>Product_Category_3</th>\n",
              "      <th>Purchase</th>\n",
              "      <th>Stay_In_Current_City_Years_0</th>\n",
              "      <th>Stay_In_Current_City_Years_1</th>\n",
              "      <th>Stay_In_Current_City_Years_2</th>\n",
              "      <th>Stay_In_Current_City_Years_3</th>\n",
              "      <th>Stay_In_Current_City_Years_4+</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>10</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>8370</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>10</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>6.0</td>\n",
              "      <td>14.0</td>\n",
              "      <td>15200</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>10</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>12</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1422</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>10</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>12</td>\n",
              "      <td>14.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1057</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>16</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>8</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>7969</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cf975078-f00b-425e-8769-14683af48402')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-cf975078-f00b-425e-8769-14683af48402 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-cf975078-f00b-425e-8769-14683af48402');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 112
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Handling missing value and replacing it with mean**"
      ],
      "metadata": {
        "id": "t6vOp41FaaYy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "mean1 = df.Product_Category_2.mean()\n",
        "mean2 = df.Product_Category_3.mean()\n",
        "df['Product_Category_2'] =df['Product_Category_2'].fillna(mean1).astype('int64')\n",
        "df['Product_Category_3'] =df['Product_Category_3'].fillna(mean2).astype('int64')"
      ],
      "metadata": {
        "id": "sWjjgZnfX_FA"
      },
      "execution_count": 113,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ol_tiZenYOLU",
        "outputId": "d48eb522-ebcf-40a0-b684-0c591343132a"
      },
      "execution_count": 114,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Gender                           0\n",
              "Age                              0\n",
              "Occupation                       0\n",
              "City_Category                    0\n",
              "Marital_Status                   0\n",
              "Product_Category_1               0\n",
              "Product_Category_2               0\n",
              "Product_Category_3               0\n",
              "Purchase                         0\n",
              "Stay_In_Current_City_Years_0     0\n",
              "Stay_In_Current_City_Years_1     0\n",
              "Stay_In_Current_City_Years_2     0\n",
              "Stay_In_Current_City_Years_3     0\n",
              "Stay_In_Current_City_Years_4+    0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 114
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dIdNORNNaDAF",
        "outputId": "b8cd2146-efa7-4c4e-b7cd-9ddc4c21f3fc"
      },
      "execution_count": 115,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 550068 entries, 0 to 550067\n",
            "Data columns (total 14 columns):\n",
            " #   Column                         Non-Null Count   Dtype\n",
            "---  ------                         --------------   -----\n",
            " 0   Gender                         550068 non-null  int64\n",
            " 1   Age                            550068 non-null  int64\n",
            " 2   Occupation                     550068 non-null  int64\n",
            " 3   City_Category                  550068 non-null  int64\n",
            " 4   Marital_Status                 550068 non-null  int64\n",
            " 5   Product_Category_1             550068 non-null  int64\n",
            " 6   Product_Category_2             550068 non-null  int64\n",
            " 7   Product_Category_3             550068 non-null  int64\n",
            " 8   Purchase                       550068 non-null  int64\n",
            " 9   Stay_In_Current_City_Years_0   550068 non-null  uint8\n",
            " 10  Stay_In_Current_City_Years_1   550068 non-null  uint8\n",
            " 11  Stay_In_Current_City_Years_2   550068 non-null  uint8\n",
            " 12  Stay_In_Current_City_Years_3   550068 non-null  uint8\n",
            " 13  Stay_In_Current_City_Years_4+  550068 non-null  uint8\n",
            "dtypes: int64(9), uint8(5)\n",
            "memory usage: 40.4 MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Splitting data into training and testing sets**"
      ],
      "metadata": {
        "id": "MeVHr7KRav70"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "X = df.drop(\"Purchase\",axis=1)\n",
        "y=df['Purchase']"
      ],
      "metadata": {
        "id": "PxWckR4_aktV"
      },
      "execution_count": 116,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=123)\n"
      ],
      "metadata": {
        "id": "95xLsQIha-qR"
      },
      "execution_count": 117,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Linear regression**"
      ],
      "metadata": {
        "id": "nYeambGLg2Ig"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LinearRegression\n"
      ],
      "metadata": {
        "id": "Xu9ncwNrekSJ"
      },
      "execution_count": 118,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Create linear regression object\n",
        "lr = LinearRegression()\n",
        "\n",
        "# Train the model using the training set\n",
        "lr.fit(X_train,y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nI4dsPpfenEr",
        "outputId": "153d6c2a-bcf6-4378-a21a-151f87b45c90"
      },
      "execution_count": 119,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression()"
            ]
          },
          "metadata": {},
          "execution_count": 119
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "lr.intercept_"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iyMacNHKerik",
        "outputId": "12fbbb20-b46c-4dea-ff80-4f6c55825388"
      },
      "execution_count": 120,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "9771.710228149399"
            ]
          },
          "metadata": {},
          "execution_count": 120
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "lr.coef_"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JWt1pZZkkzdg",
        "outputId": "f900a7ec-b247-4843-c455-abe4f7095292"
      },
      "execution_count": 121,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ 5.01001319e+02,  1.23174920e+02,  5.91253477e+00,  3.42425874e+02,\n",
              "       -6.37363865e+01, -4.11666400e+02, -7.50016112e+01,  1.12594084e+02,\n",
              "       -2.12600529e+01, -4.43380422e-01,  2.82172911e+01, -5.47551593e+00,\n",
              "       -1.03834182e+00])"
            ]
          },
          "metadata": {},
          "execution_count": 121
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred = lr.predict(X_test)"
      ],
      "metadata": {
        "id": "A9DFIBSmk1UV"
      },
      "execution_count": 122,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import mean_absolute_error,mean_squared_error, r2_score\n"
      ],
      "metadata": {
        "id": "4gDWTjUhk-lk"
      },
      "execution_count": 123,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "mean_absolute_error(y_test, y_pred)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4Zb6LXshlDKt",
        "outputId": "80c3ad7e-5e75-4d55-c0d1-868ae634333c"
      },
      "execution_count": 124,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "3602.9252605187157"
            ]
          },
          "metadata": {},
          "execution_count": 124
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "mean_squared_error(y_test, y_pred)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oltheXZkl4X_",
        "outputId": "e9bd727f-d447-468e-9191-5250e412cbf3"
      },
      "execution_count": 125,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "22013414.220225006"
            ]
          },
          "metadata": {},
          "execution_count": 125
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Accuracy of the LinearRegression model comes to be: \\n \")\n",
        "r2_score(y_test, y_pred)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FQAOpUDGmTAy",
        "outputId": "6c06393c-d3ef-4580-bc36-715cbd9b2b0f"
      },
      "execution_count": 126,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy of the LinearRegression model comes to be: \n",
            " \n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.12972381106967878"
            ]
          },
          "metadata": {},
          "execution_count": 126
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "rmse_train = np.sqrt(mean_squared_error(y_test, y_pred))\n",
        "print(\"RMSE on Test Data: \", rmse_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hpDc1yt_mVSY",
        "outputId": "ba6f799d-1150-4858-8a97-42ed7ddc6d22"
      },
      "execution_count": 127,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "RMSE on Test Data:  4691.8455025954345\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Lasso Regression**"
      ],
      "metadata": {
        "id": "HGsZH4-vbJsr"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import Lasso\n",
        "reg2 = Lasso()"
      ],
      "metadata": {
        "id": "uxRRgkpSbKU-"
      },
      "execution_count": 128,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "reg2.fit(X_train,y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yHA3_T5YbKpL",
        "outputId": "2e0b80c4-4109-4427-e892-9cd0ca523bc7"
      },
      "execution_count": 129,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Lasso()"
            ]
          },
          "metadata": {},
          "execution_count": 129
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pred2 = reg2.predict(X_test)"
      ],
      "metadata": {
        "id": "jupb_srXbK1e"
      },
      "execution_count": 130,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "pred2"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qxmJ_-1Sb_kw",
        "outputId": "a45be59f-30d4-4237-97a5-0e9d371c1fba"
      },
      "execution_count": 131,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ 7089.28409483,  2704.04577618, 12327.95754969, ...,\n",
              "       11701.04040913,  8737.91334058, 11611.52846247])"
            ]
          },
          "metadata": {},
          "execution_count": 131
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Accuracy of the LassoRegression model comes to be: \\n \") \n",
        "print(reg2.score(X_train,y_train))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yqu3G4K_cB3_",
        "outputId": "06b44213-9165-4da6-d1e3-935dc8ae1a33"
      },
      "execution_count": 132,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy of the LassoRegression model comes to be: \n",
            " \n",
            "0.12881817953022945\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "rmse_train = np.sqrt(mean_squared_error(y_test, pred2))\n",
        "print(\"RMSE on Test Data: \", rmse_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ogEFK7BrcwMN",
        "outputId": "e0d16d85-f18a-4f88-d917-1f42e8bbacac"
      },
      "execution_count": 133,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "RMSE on Test Data:  4691.8601575414505\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "vu_4M644cxGp"
      },
      "execution_count": 133,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Ridge Regression**"
      ],
      "metadata": {
        "id": "wvLL7G3hkHCv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Importing model\n",
        "from sklearn.linear_model import Ridge\n",
        "reg3 = Ridge()"
      ],
      "metadata": {
        "id": "vPYoo8ErcCAu"
      },
      "execution_count": 134,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "reg3.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vFG-zD2acCFp",
        "outputId": "9eddd0c4-62ab-47c9-f2e2-80b77d3700d2"
      },
      "execution_count": 135,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Ridge()"
            ]
          },
          "metadata": {},
          "execution_count": 135
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pred3= reg3.predict(X_test)"
      ],
      "metadata": {
        "id": "0zG02sdHcCIf"
      },
      "execution_count": 136,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Accuracy of the RidgeRegression model comes to be: \\n \") \n",
        "print(reg3.score(X_train,y_train))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "V-xb5OXmcfAl",
        "outputId": "c8e1a830-7fa4-4856-ad39-91e8519ba161"
      },
      "execution_count": 137,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy of the RidgeRegression model comes to be: \n",
            " \n",
            "0.12881933091851294\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "kFKaXnUiwgHq"
      },
      "execution_count": 137,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "rmse_train = np.sqrt(mean_squared_error(y_test, pred3))\n",
        "print(\"RMSE on Test Data: \", rmse_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VnXG6_e7cfIs",
        "outputId": "403996e2-2322-499b-ac92-5a86c045aa1a"
      },
      "execution_count": 138,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "RMSE on Test Data:  4691.845506376657\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Xgy7N0HAcfLe"
      },
      "execution_count": 138,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Decision Tree Regressor**"
      ],
      "metadata": {
        "id": "FWX3Z9ztv-vi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.tree import DecisionTreeRegressor\n",
        "\n",
        "# create a regressor object \n",
        "regressor = DecisionTreeRegressor(random_state = 0) "
      ],
      "metadata": {
        "id": "d3B6ceDCv9mi"
      },
      "execution_count": 139,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "regressor.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "f4sXzGFkv9xT",
        "outputId": "b87e0a6e-35de-4c5d-d6b2-077c530cbdca"
      },
      "execution_count": 140,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "DecisionTreeRegressor(random_state=0)"
            ]
          },
          "metadata": {},
          "execution_count": 140
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dt_y_pred = regressor.predict(X_test)"
      ],
      "metadata": {
        "id": "4wTN5F40v95K"
      },
      "execution_count": 141,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "mean_absolute_error(y_test, dt_y_pred)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sv-OCiY7v98I",
        "outputId": "dd50b4eb-b9d0-4621-bc37-01e1dd94b5d6"
      },
      "execution_count": 142,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2343.4309253102556"
            ]
          },
          "metadata": {},
          "execution_count": 142
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "mean_squared_error(y_test, dt_y_pred)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "X27HtheHv9_E",
        "outputId": "b2874562-2f62-4209-93cf-335f5a3b5848"
      },
      "execution_count": 143,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "10993262.43644692"
            ]
          },
          "metadata": {},
          "execution_count": 143
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "r2_score(y_test, dt_y_pred)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GefDCRxHv-B8",
        "outputId": "ca1aa2a6-377b-4eed-e076-42b14de6844d"
      },
      "execution_count": 144,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.56539342596334"
            ]
          },
          "metadata": {},
          "execution_count": 144
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Accuracy of the Decesion tree regressor model comes to be: \\n \") \n",
        "print(r2_score(y_test, dt_y_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "g07u3LhfyP2H",
        "outputId": "3eb0df23-c016-4532-c920-0bf220b555c2"
      },
      "execution_count": 146,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy of the Decesion tree regressor model comes to be: \n",
            " \n",
            "0.56539342596334\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from math import sqrt\n",
        "print(\"RMSE of Decision tree regressor Model is \",sqrt(mean_squared_error(y_test, dt_y_pred)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "orvfJu9Ev-FA",
        "outputId": "dde061a7-87d8-4228-d893-6452e7c3569b"
      },
      "execution_count": 147,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "RMSE of Decision tree regressor Model is  3315.608908850216\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "***Random Forest regressor***"
      ],
      "metadata": {
        "id": "xkaZN7uCpfpc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.ensemble import RandomForestRegressor\n",
        "\n",
        "# create a regressor object \n",
        "RFregressor = RandomForestRegressor(random_state = 0)  "
      ],
      "metadata": {
        "id": "EvoRnCqYmlfI"
      },
      "execution_count": 148,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "RFregressor.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "agsKY097p5VL",
        "outputId": "787021fd-c26c-4545-8179-83ecc3ae8c2a"
      },
      "execution_count": 149,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomForestRegressor(random_state=0)"
            ]
          },
          "metadata": {},
          "execution_count": 149
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "rf_y_pred = RFregressor.predict(X_test)"
      ],
      "metadata": {
        "id": "_CeeonqnqlJY"
      },
      "execution_count": 150,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "mean_absolute_error(y_test, rf_y_pred)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CLB8Ojq2rD2o",
        "outputId": "08f5bff3-2b1e-4113-e0ae-ee804512a55c"
      },
      "execution_count": 151,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2210.292709670269"
            ]
          },
          "metadata": {},
          "execution_count": 151
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "mean_squared_error(y_test, rf_y_pred)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zTCw2OtFrFwV",
        "outputId": "739c6645-41d0-43fb-be48-45eff2dd216e"
      },
      "execution_count": 152,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "9205334.953478044"
            ]
          },
          "metadata": {},
          "execution_count": 152
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "r2_score(y_test, rf_y_pred)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KwQ34hgdrHq4",
        "outputId": "84afc001-f831-46c9-e49f-3eb6fd49a279"
      },
      "execution_count": 153,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.6360771781698631"
            ]
          },
          "metadata": {},
          "execution_count": 153
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Accuracy of the Random Forest regressor model comes to be: \\n \") \n",
        "print(r2_score(y_test, rf_y_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LxIexnr4z0Vq",
        "outputId": "21ef6b1d-2bd7-4232-a57a-6089758d663b"
      },
      "execution_count": 154,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy of the Random Forest regressor model comes to be: \n",
            " \n",
            "0.6360771781698631\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from math import sqrt\n",
        "print(\"RMSE of Random forest regresion Model is \",sqrt(mean_squared_error(y_test, rf_y_pred)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WfDe1LeorK5X",
        "outputId": "6d3971ce-e3e5-4f36-f974-17e6edc417e8"
      },
      "execution_count": 156,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "RMSE of Random forest regresion Model is  3034.0294912011063\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**XGBoost Regressor**"
      ],
      "metadata": {
        "id": "jYuzgZZ7xpps"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from xgboost.sklearn import XGBRegressor\n",
        "xgb_reg = XGBRegressor(learning_rate=1.0, max_depth=6, min_child_weight=40, seed=0)\n",
        "\n",
        "xgb_reg.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DS1dKer4xo0y",
        "outputId": "4e79cf22-9323-4773-f324-bf4b85f0bc31"
      },
      "execution_count": 157,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[00:22:02] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "XGBRegressor(learning_rate=1.0, max_depth=6, min_child_weight=40, seed=0)"
            ]
          },
          "metadata": {},
          "execution_count": 157
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "xgb_y_pred = xgb_reg.predict(X_test)"
      ],
      "metadata": {
        "id": "SOk63MFerPnz"
      },
      "execution_count": 158,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "mean_absolute_error(y_test, xgb_y_pred)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Zs_3YRfZuAxP",
        "outputId": "63ed6017-736b-4a75-eaad-d2a2a8f325d5"
      },
      "execution_count": 159,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2136.779779876488"
            ]
          },
          "metadata": {},
          "execution_count": 159
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "mean_squared_error(y_test, xgb_y_pred)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hdlsh5rmx9zB",
        "outputId": "4521e5f3-02cc-45e7-bd90-68769141b591"
      },
      "execution_count": 160,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "8209058.072280257"
            ]
          },
          "metadata": {},
          "execution_count": 160
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "r2_score(y_test, xgb_y_pred)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LSaHAWtayARU",
        "outputId": "5da4e6b5-f86e-40f3-b98e-5732b4932475"
      },
      "execution_count": 161,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.6754638920441516"
            ]
          },
          "metadata": {},
          "execution_count": 161
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Accuracy of the XGBoost regressor model comes to be: \\n \") \n",
        "print(r2_score(y_test, xgb_y_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XCgQhgdu0bYK",
        "outputId": "090a6194-ba0c-4e4c-91fd-9b1855dbe150"
      },
      "execution_count": 162,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy of the XGBoost regressor model comes to be: \n",
            " \n",
            "0.6754638920441516\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from math import sqrt\n",
        "print(\"RMSE of XGBoost Regression Model is \",sqrt(mean_squared_error(y_test, xgb_y_pred)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "o_50dmGByCeS",
        "outputId": "5dc263d5-6e97-438f-b04b-5f06ec958c43"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "RMSE of XGBoost Regression Model is  2865.1453841437537\n"
          ]
        }
      ]
    }
  ]
}